syntax = "proto3";

package secretsservice;

option go_package = "github.com/kurs0n/SecretsService/proto;secretsservice";

service SecretsService {
    rpc ListRepos (ListReposRequest) returns (ListReposResponse);
    rpc UploadSecret (UploadSecretRequest) returns (UploadSecretResponse);
    rpc ListSecretVersions (ListSecretVersionsRequest) returns (ListSecretVersionsResponse);
    rpc DownloadSecret (DownloadSecretRequest) returns (DownloadSecretResponse);
    rpc DownloadSecretByTag (DownloadSecretByTagRequest) returns (DownloadSecretResponse);
    rpc DeleteSecret (DeleteSecretRequest) returns (DeleteSecretResponse);
    rpc ListAllRepositoriesWithVersions (ListAllRepositoriesWithVersionsRequest) returns (ListAllRepositoriesWithVersionsResponse);
}

message ListReposRequest {
    string access_token = 1;
    string user_login = 2;
}
 
message ListReposResponse {
    repeated Repo repos = 1;
    string error = 2;
}

message Repo {
    int64 id = 1;
    string name = 2;
    string full_name = 3;
    string html_url = 4;
    string description = 5;
    bool private = 6;
    string owner_login = 7;
    string owner_avatar_url = 8;
}

message UploadSecretRequest {
    string access_token = 1;
    string owner_login = 2;
    string repo_name = 3;
    string tag = 4; // Optional tag for version (e.g., "v1.0.0", "production")
    bytes env_file_content = 5; // Raw .env file content (base64 encoded)
    string user_login = 6;
}

message UploadSecretResponse {
    bool success = 1;
    int32 version = 2;
    string checksum = 3;
    string error = 4;
}

message ListSecretVersionsRequest {
    string access_token = 1;
    string owner_login = 2;
    string repo_name = 3;
    string user_login = 4;
}

message ListSecretVersionsResponse {
    repeated SecretVersion versions = 1;
    string error = 2;
}

message SecretVersion {
    int32 version = 1;
    string tag = 2;
    string checksum = 3;
    string uploaded_by = 4;
    string created_at = 5;
    bool is_encrypted = 6;
}

message DownloadSecretRequest {
    string access_token = 1;
    string owner_login = 2;
    string repo_name = 3;
    int32 version = 4; // 0 means latest version
    string user_login = 5;
}

message DownloadSecretByTagRequest {
    string access_token = 1;
    string owner_login = 2;
    string repo_name = 3;
    string tag = 4; // Tag to search for
    string user_login = 5;
}

message DownloadSecretResponse {
    bool success = 1;
    int32 version = 2;
    string tag = 3;
    bytes env_file_content = 4;
    string checksum = 5;
    string uploaded_by = 6;
    string created_at = 7;
    string error = 8;
    bool is_encrypted = 9;
}

message DeleteSecretRequest {
    string access_token = 1;
    string owner_login = 2;
    string repo_name = 3;
    int32 version = 4; // 0 means delete all versions
    string user_login = 5;
}

message DeleteSecretResponse {
    bool success = 1;
    int32 deleted_versions = 2;
    string error = 3;
}

message ListAllRepositoriesWithVersionsRequest {
    string access_token = 1;
    string user_login = 2;
}

message ListAllRepositoriesWithVersionsResponse {
    repeated RepositoryWithVersions repositories = 1;
    string error = 2;
}

message RepositoryWithVersions {
    uint32 id = 1;
    string owner_login = 2;
    string repo_name = 3;
    int64 repo_id = 4;
    string full_name = 5;
    string html_url = 6;
    string description = 7;
    bool is_private = 8;
    string created_at = 9;
    string updated_at = 10;
    repeated SecretVersion versions = 11;
}
